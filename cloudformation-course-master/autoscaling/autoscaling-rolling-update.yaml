## Launch This on us-east-1 as it is. Or enter your Preferred Image ID(AMI).  In a later lesson we will use custom Resources to get AMI according to the region

AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for VPC
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
  ImageId:
    Description: AMI to use
    Type: String
    Default: ami-0de53d8956e8dcf80
Resources:
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
        - Key: Name
          Value: CLoudFormation-VPC
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.1.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Network
          Value: PublicSubnet1
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.2.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Network
          Value: PublicSubnet1
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: ' StackId'
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access to the bastion host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
  MyConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      AssociatePublicIpAddress: true
      UserData:
        # TODO: add signal (cfn-signal) for autoscaling group
         Fn::Base64: !Sub |
              #!/bin/bash
              yum install -y httpd
              # Install the files and packages from the metadata
              service httpd start
              chkconfig httpd on
              echo '<h1>Hello from Webserver 100  </h1>'>/var/www/html/index.html
      SecurityGroups:
        - !Ref SecurityGroup
      InstanceType: !Ref InstanceType
  ElasticLoadBalancer1:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: 'HTTP:80/'
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '6'
        Timeout: '5'
  ASG:
    ## TODO add wait for signal and add signal to EC2 userdata
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    UpdatePolicy:
      AutoScalingRollingUpdate:
          MinInstancesInService: '2'
          MaxBatchSize: '2'

          PauseTime: PT5M
    Properties:
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
      LaunchConfigurationName: !Ref MyConfig
      DesiredCapacity: '2'
      MaxSize: '3'
      MinSize: '2'
      LoadBalancerNames:
        - !Ref ElasticLoadBalancer1
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
Outputs:
  DNSName:
    Description: The DNSName of the  load balancer
    Value: !GetAtt
      - ElasticLoadBalancer1
      - DNSName
